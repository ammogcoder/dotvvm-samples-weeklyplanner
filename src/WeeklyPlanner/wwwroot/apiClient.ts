namespace WeeklyPlanner.Api {
    class ClientBase {
        public transformOptions(options: RequestInit) {
            options.credentials = "same-origin";
            return Promise.resolve(options);
        }
    }
    /* tslint:disable */
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.3.5.0 (NJsonSchema v9.4.5.0) (http://NSwag.org)
    // </auto-generated>
    //----------------------
    // ReSharper disable InconsistentNaming
    
    
    export class Client extends ClientBase {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: (key: string, value: any) => any = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            super();
            this.http = http ? http : <any>window;
            this.baseUrl = baseUrl ? baseUrl : "";
        }
    
        /**
         * @return Success
         */
        apiTasksGet(date?: Date): Promise<WeekViewDTO> {
            let url_ = this.baseUrl + "/api/tasks?";
            if (date !== undefined)
                url_ += "date=" + encodeURIComponent(date ? "" + date.toJSON() : "null") + "&"; 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: {
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                }
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksGet(_response);
            });
        }
    
        protected processApiTasksGet(response: Response): Promise<WeekViewDTO> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: WeekViewDTO = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? WeekViewDTO.fromJS(resultData200) : new WeekViewDTO();
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<WeekViewDTO>(<any>null);
        }
    
        /**
         * @return Success
         */
        apiTasksPut(task?: ScheduledTaskDTO): Promise<void> {
            let url_ = this.baseUrl + "/api/tasks";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(task);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json", 
                }
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksPut(_response);
            });
        }
    
        protected processApiTasksPut(response: Response): Promise<void> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    
        /**
         * @return Success
         */
        apiTasksPost(task?: ScheduledTaskDTO): Promise<void> {
            let url_ = this.baseUrl + "/api/tasks";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(task);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json", 
                }
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksPost(_response);
            });
        }
    
        protected processApiTasksPost(response: Response): Promise<void> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    
        /**
         * @return Success
         */
        apiTasksMoveByIdPost(id: number, date?: Date): Promise<void> {
            let url_ = this.baseUrl + "/api/tasks/move/{id}?";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
            if (date !== undefined)
                url_ += "date=" + encodeURIComponent(date ? "" + date.toJSON() : "null") + "&"; 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "POST",
                headers: {
                    "Content-Type": "application/json", 
                }
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksMoveByIdPost(_response);
            });
        }
    
        protected processApiTasksMoveByIdPost(response: Response): Promise<void> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    
        /**
         * @return Success
         */
        apiTasksCompleteByIdPost(id: number): Promise<void> {
            let url_ = this.baseUrl + "/api/tasks/complete/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "POST",
                headers: {
                    "Content-Type": "application/json", 
                }
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksCompleteByIdPost(_response);
            });
        }
    
        protected processApiTasksCompleteByIdPost(response: Response): Promise<void> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    
        /**
         * @return Success
         */
        apiTasksByIdDelete(id: number): Promise<void> {
            let url_ = this.baseUrl + "/api/tasks/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json", 
                }
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksByIdDelete(_response);
            });
        }
    
        protected processApiTasksByIdDelete(response: Response): Promise<void> {
            const status = response.status;
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    }
    
    export class WeekViewDTO implements IWeekViewDTO {
        days?: DayViewDTO[];
    
        constructor(data?: IWeekViewDTO) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                if (data["days"] && data["days"].constructor === Array) {
                    this.days = [];
                    for (let item of data["days"])
                        this.days.push(DayViewDTO.fromJS(item));
                }
            }
        }
    
        static fromJS(data: any): WeekViewDTO {
            let result = new WeekViewDTO();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            if (this.days && this.days.constructor === Array) {
                data["days"] = [];
                for (let item of this.days)
                    data["days"].push(item.toJSON());
            }
            return data; 
        }
    }
    
    export interface IWeekViewDTO {
        days?: DayViewDTO[];
    }
    
    export class DayViewDTO implements IDayViewDTO {
        name?: string;
        date?: Date;
        tasks?: ScheduledTaskDTO[];
    
        constructor(data?: IDayViewDTO) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.name = data["name"] !== undefined ? data["name"] : <any>null;
                this.date = data["date"] ? new Date(data["date"].toString()) : <any>null;
                if (data["tasks"] && data["tasks"].constructor === Array) {
                    this.tasks = [];
                    for (let item of data["tasks"])
                        this.tasks.push(ScheduledTaskDTO.fromJS(item));
                }
            }
        }
    
        static fromJS(data: any): DayViewDTO {
            let result = new DayViewDTO();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["name"] = this.name !== undefined ? this.name : <any>null;
            data["date"] = this.date ? this.date.toISOString() : <any>null;
            if (this.tasks && this.tasks.constructor === Array) {
                data["tasks"] = [];
                for (let item of this.tasks)
                    data["tasks"].push(item.toJSON());
            }
            return data; 
        }
    }
    
    export interface IDayViewDTO {
        name?: string;
        date?: Date;
        tasks?: ScheduledTaskDTO[];
    }
    
    export class ScheduledTaskDTO implements IScheduledTaskDTO {
        id?: number;
        text?: string;
        createdDate?: Date;
        dueDate?: Date;
        completedDate?: Date;
        tags?: string[];
    
        constructor(data?: IScheduledTaskDTO) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.id = data["id"] !== undefined ? data["id"] : <any>null;
                this.text = data["text"] !== undefined ? data["text"] : <any>null;
                this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>null;
                this.dueDate = data["dueDate"] ? new Date(data["dueDate"].toString()) : <any>null;
                this.completedDate = data["completedDate"] ? new Date(data["completedDate"].toString()) : <any>null;
                if (data["tags"] && data["tags"].constructor === Array) {
                    this.tags = [];
                    for (let item of data["tags"])
                        this.tags.push(item);
                }
            }
        }
    
        static fromJS(data: any): ScheduledTaskDTO {
            let result = new ScheduledTaskDTO();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["id"] = this.id !== undefined ? this.id : <any>null;
            data["text"] = this.text !== undefined ? this.text : <any>null;
            data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
            data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>null;
            data["completedDate"] = this.completedDate ? this.completedDate.toISOString() : <any>null;
            if (this.tags && this.tags.constructor === Array) {
                data["tags"] = [];
                for (let item of this.tags)
                    data["tags"].push(item);
            }
            return data; 
        }
    }
    
    export interface IScheduledTaskDTO {
        id?: number;
        text?: string;
        createdDate?: Date;
        dueDate?: Date;
        completedDate?: Date;
        tags?: string[];
    }
    
    export class SwaggerException extends Error {
        message: string;
        status: number; 
        response: string; 
        result: any; 
    
        constructor(message: string, status: number, response: string, result: any) {
            super();
    
            this.message = message;
            this.status = status;
            this.response = response;
            this.result = result;
        }
    }
    
    function throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}
