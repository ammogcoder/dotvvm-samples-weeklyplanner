namespace WeeklyPlanner.Api {
    class ClientBase {
        public transformOptions(options: RequestInit) {
            options.credentials = "same-origin";
            return Promise.resolve(options);
        }
    }
    /* tslint:disable */
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.12.13.0 (NJsonSchema v9.10.14.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
    // </auto-generated>
    //----------------------
    // ReSharper disable InconsistentNaming
    
    export class Client extends ClientBase {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: (key: string, value: any) => any = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            super();
            this.http = http ? http : <any>window;
            this.baseUrl = baseUrl ? baseUrl : "";
        }
    
        /**
         * @return Success
         */
        apiTasksGet(date: Date): Promise<WeekViewDTO> {
            let url_ = this.baseUrl + "/api/tasks?";
            if (date === undefined || date === null)
                throw new Error("The parameter 'date' must be defined and cannot be null.");
            else
                url_ += "date=" + encodeURIComponent(date ? "" + date.toJSON() : "") + "&"; 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksGet(_response);
            });
        }
    
        protected processApiTasksGet(response: Response): Promise<WeekViewDTO> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? WeekViewDTO.fromJS(resultData200) : new WeekViewDTO();
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<WeekViewDTO>(<any>null);
        }
    
        /**
         * @task (optional) 
         * @return Success
         */
        apiTasksPut(task?: ScheduledTaskDTO): Promise<void> {
            let url_ = this.baseUrl + "/api/tasks";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(task);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "PUT",
                headers: new Headers({
                    "Content-Type": "application/json", 
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksPut(_response);
            });
        }
    
        protected processApiTasksPut(response: Response): Promise<void> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    
        /**
         * @task (optional) 
         * @return Success
         */
        apiTasksPost(task?: ScheduledTaskDTO): Promise<void> {
            let url_ = this.baseUrl + "/api/tasks";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(task);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Content-Type": "application/json", 
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksPost(_response);
            });
        }
    
        protected processApiTasksPost(response: Response): Promise<void> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    
        /**
         * @return Success
         */
        apiTasksMoveByIdPost(id: number, date: Date): Promise<void> {
            let url_ = this.baseUrl + "/api/tasks/move/{id}?";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
            if (date === undefined || date === null)
                throw new Error("The parameter 'date' must be defined and cannot be null.");
            else
                url_ += "date=" + encodeURIComponent(date ? "" + date.toJSON() : "") + "&"; 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "POST",
                headers: new Headers({
                    "Content-Type": "application/json", 
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksMoveByIdPost(_response);
            });
        }
    
        protected processApiTasksMoveByIdPost(response: Response): Promise<void> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    
        /**
         * @return Success
         */
        apiTasksCompleteByIdPost(id: number): Promise<void> {
            let url_ = this.baseUrl + "/api/tasks/complete/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "POST",
                headers: new Headers({
                    "Content-Type": "application/json", 
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksCompleteByIdPost(_response);
            });
        }
    
        protected processApiTasksCompleteByIdPost(response: Response): Promise<void> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    
        /**
         * @return Success
         */
        apiTasksByIdDelete(id: number): Promise<void> {
            let url_ = this.baseUrl + "/api/tasks/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "DELETE",
                headers: new Headers({
                    "Content-Type": "application/json", 
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processApiTasksByIdDelete(_response);
            });
        }
    
        protected processApiTasksByIdDelete(response: Response): Promise<void> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<void>(<any>null);
        }
    }
    
    export class WeekViewDTO implements IWeekViewDTO {
        Days?: DayViewDTO[];
    
        constructor(data?: IWeekViewDTO) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                if (data["days"] && data["days"].constructor === Array) {
                    this.Days = [];
                    for (let item of data["days"])
                        this.Days.push(DayViewDTO.fromJS(item));
                }
            }
        }
    
        static fromJS(data: any): WeekViewDTO {
            let result = new WeekViewDTO();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            if (this.Days && this.Days.constructor === Array) {
                data["days"] = [];
                for (let item of this.Days)
                    data["days"].push(item.toJSON());
            }
            return data; 
        }
    }
    
    export interface IWeekViewDTO {
        Days?: DayViewDTO[];
    }
    
    export class DayViewDTO implements IDayViewDTO {
        Name?: string;
        Date?: Date;
        Tasks?: ScheduledTaskDTO[];
    
        constructor(data?: IDayViewDTO) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.Name = data["name"] !== undefined ? data["name"] : <any>null;
                this.Date = data["date"] ? new Date(data["date"].toString()) : <any>null;
                if (data["tasks"] && data["tasks"].constructor === Array) {
                    this.Tasks = [];
                    for (let item of data["tasks"])
                        this.Tasks.push(ScheduledTaskDTO.fromJS(item));
                }
            }
        }
    
        static fromJS(data: any): DayViewDTO {
            let result = new DayViewDTO();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["name"] = this.Name !== undefined ? this.Name : <any>null;
            data["date"] = this.Date ? this.Date.toISOString() : <any>null;
            if (this.Tasks && this.Tasks.constructor === Array) {
                data["tasks"] = [];
                for (let item of this.Tasks)
                    data["tasks"].push(item.toJSON());
            }
            return data; 
        }
    }
    
    export interface IDayViewDTO {
        Name?: string;
        Date?: Date;
        Tasks?: ScheduledTaskDTO[];
    }
    
    export class ScheduledTaskDTO implements IScheduledTaskDTO {
        Id?: number;
        Text?: string;
        CreatedDate?: Date;
        DueDate?: Date;
        CompletedDate?: Date;
        Tags?: string[];
    
        constructor(data?: IScheduledTaskDTO) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.Id = data["id"] !== undefined ? data["id"] : <any>null;
                this.Text = data["text"] !== undefined ? data["text"] : <any>null;
                this.CreatedDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>null;
                this.DueDate = data["dueDate"] ? new Date(data["dueDate"].toString()) : <any>null;
                this.CompletedDate = data["completedDate"] ? new Date(data["completedDate"].toString()) : <any>null;
                if (data["tags"] && data["tags"].constructor === Array) {
                    this.Tags = [];
                    for (let item of data["tags"])
                        this.Tags.push(item);
                }
            }
        }
    
        static fromJS(data: any): ScheduledTaskDTO {
            let result = new ScheduledTaskDTO();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["id"] = this.Id !== undefined ? this.Id : <any>null;
            data["text"] = this.Text !== undefined ? this.Text : <any>null;
            data["createdDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>null;
            data["dueDate"] = this.DueDate ? this.DueDate.toISOString() : <any>null;
            data["completedDate"] = this.CompletedDate ? this.CompletedDate.toISOString() : <any>null;
            if (this.Tags && this.Tags.constructor === Array) {
                data["tags"] = [];
                for (let item of this.Tags)
                    data["tags"].push(item);
            }
            return data; 
        }
    }
    
    export interface IScheduledTaskDTO {
        Id?: number;
        Text?: string;
        CreatedDate?: Date;
        DueDate?: Date;
        CompletedDate?: Date;
        Tags?: string[];
    }
    
    export class SwaggerException extends Error {
        message: string;
        status: number; 
        response: string; 
        headers: { [key: string]: any; };
        result: any; 
    
        constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
            super();
    
            this.message = message;
            this.status = status;
            this.response = response;
            this.headers = headers;
            this.result = result;
        }
    
        protected isSwaggerException = true;
    
        static isSwaggerException(obj: any): obj is SwaggerException {
            return obj.isSwaggerException === true;
        }
    }
    
    function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, headers, null);
    }
}
