var WeeklyPlanner;
(function (WeeklyPlanner) {
    var Api;
    (function (Api) {
        class ClientBase {
            transformOptions(options) {
                options.credentials = "same-origin";
                return Promise.resolve(options);
            }
        }
        /* tslint:disable */
        //----------------------
        // <auto-generated>
        //     Generated using the NSwag toolchain v11.3.5.0 (NJsonSchema v9.4.5.0) (http://NSwag.org)
        // </auto-generated>
        //----------------------
        // ReSharper disable InconsistentNaming
        class Client extends ClientBase {
            constructor(baseUrl, http) {
                super();
                this.jsonParseReviver = undefined;
                this.http = http ? http : window;
                this.baseUrl = baseUrl ? baseUrl : "";
            }
            /**
             * @return Success
             */
            apiTasksGet(date) {
                let url_ = this.baseUrl + "/api/tasks?";
                if (date !== undefined)
                    url_ += "date=" + encodeURIComponent(date ? "" + date.toJSON() : "null") + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.transformOptions(options_).then(transformedOptions_ => {
                    return this.http.fetch(url_, transformedOptions_);
                }).then((_response) => {
                    return this.processApiTasksGet(_response);
                });
            }
            processApiTasksGet(response) {
                const status = response.status;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? WeekViewDTO.fromJS(resultData200) : new WeekViewDTO();
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText);
                    });
                }
                return Promise.resolve(null);
            }
            /**
             * @return Success
             */
            apiTasksPut(task) {
                let url_ = this.baseUrl + "/api/tasks";
                url_ = url_.replace(/[?&]$/, "");
                const content_ = JSON.stringify(task);
                let options_ = {
                    body: content_,
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    }
                };
                return this.transformOptions(options_).then(transformedOptions_ => {
                    return this.http.fetch(url_, transformedOptions_);
                }).then((_response) => {
                    return this.processApiTasksPut(_response);
                });
            }
            processApiTasksPut(response) {
                const status = response.status;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        return;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText);
                    });
                }
                return Promise.resolve(null);
            }
            /**
             * @return Success
             */
            apiTasksPost(task) {
                let url_ = this.baseUrl + "/api/tasks";
                url_ = url_.replace(/[?&]$/, "");
                const content_ = JSON.stringify(task);
                let options_ = {
                    body: content_,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    }
                };
                return this.transformOptions(options_).then(transformedOptions_ => {
                    return this.http.fetch(url_, transformedOptions_);
                }).then((_response) => {
                    return this.processApiTasksPost(_response);
                });
            }
            processApiTasksPost(response) {
                const status = response.status;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        return;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText);
                    });
                }
                return Promise.resolve(null);
            }
            /**
             * @return Success
             */
            apiTasksMoveByIdPost(id, date) {
                let url_ = this.baseUrl + "/api/tasks/move/{id}?";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                if (date !== undefined)
                    url_ += "date=" + encodeURIComponent(date ? "" + date.toJSON() : "null") + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    }
                };
                return this.transformOptions(options_).then(transformedOptions_ => {
                    return this.http.fetch(url_, transformedOptions_);
                }).then((_response) => {
                    return this.processApiTasksMoveByIdPost(_response);
                });
            }
            processApiTasksMoveByIdPost(response) {
                const status = response.status;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        return;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText);
                    });
                }
                return Promise.resolve(null);
            }
            /**
             * @return Success
             */
            apiTasksCompleteByIdPost(id) {
                let url_ = this.baseUrl + "/api/tasks/complete/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    }
                };
                return this.transformOptions(options_).then(transformedOptions_ => {
                    return this.http.fetch(url_, transformedOptions_);
                }).then((_response) => {
                    return this.processApiTasksCompleteByIdPost(_response);
                });
            }
            processApiTasksCompleteByIdPost(response) {
                const status = response.status;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        return;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText);
                    });
                }
                return Promise.resolve(null);
            }
            /**
             * @return Success
             */
            apiTasksByIdDelete(id) {
                let url_ = this.baseUrl + "/api/tasks/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json",
                    }
                };
                return this.transformOptions(options_).then(transformedOptions_ => {
                    return this.http.fetch(url_, transformedOptions_);
                }).then((_response) => {
                    return this.processApiTasksByIdDelete(_response);
                });
            }
            processApiTasksByIdDelete(response) {
                const status = response.status;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        return;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText);
                    });
                }
                return Promise.resolve(null);
            }
        }
        Api.Client = Client;
        class WeekViewDTO {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(data) {
                if (data) {
                    if (data["days"] && data["days"].constructor === Array) {
                        this.days = [];
                        for (let item of data["days"])
                            this.days.push(DayViewDTO.fromJS(item));
                    }
                }
            }
            static fromJS(data) {
                let result = new WeekViewDTO();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                if (this.days && this.days.constructor === Array) {
                    data["days"] = [];
                    for (let item of this.days)
                        data["days"].push(item.toJSON());
                }
                return data;
            }
        }
        Api.WeekViewDTO = WeekViewDTO;
        class DayViewDTO {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(data) {
                if (data) {
                    this.name = data["name"] !== undefined ? data["name"] : null;
                    this.date = data["date"] ? new Date(data["date"].toString()) : null;
                    if (data["tasks"] && data["tasks"].constructor === Array) {
                        this.tasks = [];
                        for (let item of data["tasks"])
                            this.tasks.push(ScheduledTaskDTO.fromJS(item));
                    }
                }
            }
            static fromJS(data) {
                let result = new DayViewDTO();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["name"] = this.name !== undefined ? this.name : null;
                data["date"] = this.date ? this.date.toISOString() : null;
                if (this.tasks && this.tasks.constructor === Array) {
                    data["tasks"] = [];
                    for (let item of this.tasks)
                        data["tasks"].push(item.toJSON());
                }
                return data;
            }
        }
        Api.DayViewDTO = DayViewDTO;
        class ScheduledTaskDTO {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.text = data["text"] !== undefined ? data["text"] : null;
                    this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : null;
                    this.dueDate = data["dueDate"] ? new Date(data["dueDate"].toString()) : null;
                    this.completedDate = data["completedDate"] ? new Date(data["completedDate"].toString()) : null;
                    if (data["tags"] && data["tags"].constructor === Array) {
                        this.tags = [];
                        for (let item of data["tags"])
                            this.tags.push(item);
                    }
                }
            }
            static fromJS(data) {
                let result = new ScheduledTaskDTO();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["text"] = this.text !== undefined ? this.text : null;
                data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : null;
                data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : null;
                data["completedDate"] = this.completedDate ? this.completedDate.toISOString() : null;
                if (this.tags && this.tags.constructor === Array) {
                    data["tags"] = [];
                    for (let item of this.tags)
                        data["tags"].push(item);
                }
                return data;
            }
        }
        Api.ScheduledTaskDTO = ScheduledTaskDTO;
        class SwaggerException extends Error {
            constructor(message, status, response, result) {
                super();
                this.message = message;
                this.status = status;
                this.response = response;
                this.result = result;
            }
        }
        Api.SwaggerException = SwaggerException;
        function throwException(message, status, response, result) {
            if (result !== null && result !== undefined)
                throw result;
            else
                throw new SwaggerException(message, status, response, null);
        }
    })(Api = WeeklyPlanner.Api || (WeeklyPlanner.Api = {}));
})(WeeklyPlanner || (WeeklyPlanner = {}));
//# sourceMappingURL=apiClient.js.map